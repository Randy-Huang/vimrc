
" ==========================================================================================
" =========================== VUNDLE SETTINGS SECTION ======================================
" ==========================================================================================
" =============================== Plugin Management ========================================
" Utility
" Not Use Plgin (Maybe other similar plugin seems to be more useful)
" Plugin 'FuzzyFinder'                " buffer/file/command/tag/etc explorer with fuzzy matching
" Plugin 'The-NERD-tree'              " a tree explorer plugin for navigating the filesystem
" Plugin 'Lokaltog/vim-powerline'     " allow you to create better-looking, more functional vim statuslines
" Plugin 'fholgado/minibufexpl.vim'   " elegant buffer explorer - takes very little screen space
" Plugin 'lookupfile'                 " Lookup files using Vim7 ins-completion
" Plugin 'AutoComplPop'               " automatically opens popup menu for completions
" Plugin 'neocomplcache'              " ultimate auto completion system for Vim
" Plugin 'Shougo/neocomplete.vim'     " keyword completion system by maintaining a cache of keywords in the current buffer
" ============================= End Plugin Management ======================================


" ==========================================================================================
" ========================== PLUGINS SETTINGS SECTION ======================================
" ==========================================================================================
" ================================== Powerline (vim) =======================================
" let g:Powerline_symbols='fancy'                 " enable fancy symbol in powerline
" let g:Powerline_colorscheme='solarized256'      " set powerline colorscheme
" set fillchars+=stl:\ ,stlnc:\                   " disable statusline fillchars

" ================================== FuzzyFinder ===========================================
" map <leader>F :FufFile<CR>  
" map <leader>f :FufTaggedFile<CR>     
" map <leader>g :FufTag<CR>       
" map <leader>b :FufBuffer<CR>


" ================================= Neocomplete ============================================
" Disable AutoComplPop
let g:acp_enableAtStartup=0
" Use neocomplete
let g:neocomplete#enable_at_startup=1
" Use smartcase
let g:neocomplete#enable_smart_case=1
" Set minimum syntax keyword length
let g:neocomplete#sources#syntax#min_keyword_length=3
let g:neocomplete#lock_buffer_name_pattern='\*ku\*'
" Define dictionary
let g:neocomplete#sources#dictionary#dictionaries={
    \ 'default'  : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme'   : $HOME.'/.gosh_completions'
    \ }
" Define keyword
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns={}
endif
let g:neocomplete#keyword_patterns['default']='\h\w*'
" Plugin key-mappings
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
" Recommended key-mappings
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
"   For no inserting <CR> key
"   return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char
inoremap <expr><C-h>  neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>   neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
















































